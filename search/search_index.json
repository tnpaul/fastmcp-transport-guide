{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FastMCP Transport Options (v2.0+)","text":"<p>FastMCP provides multiple transport options to connect MCP clients and servers. Each transport type is suited for different environments and communication patterns.</p> <p>Below is a complete guide to all available transport types, along with ready-to-use Python examples for both the server and client.</p>"},{"location":"#1-stdio-transport","title":"1. <code>stdio</code> Transport","text":""},{"location":"#when-to-use","title":"When to Use","text":"<ul> <li>Ideal for local development or when running as a child process.</li> <li>Low-latency communication using standard input/output streams.</li> <li>Great for CLI tools or desktop apps.</li> </ul>"},{"location":"#server-stdio","title":"Server (stdio)","text":"<pre><code># server_stdio.py\nfrom fastmcp import FastMCP\n\n# Create MCP server instance\nmcp = FastMCP(\"STDIO Demo Server\")\n\n@mcp.tool()\ndef greet(name: str) -&gt; str:\n    \"\"\"Greet someone by name.\"\"\"\n    return f\"Hello, {name}!\"\n\n@mcp.tool()\ndef calculate(op: str, a: float, b: float) -&gt; str:\n    \"\"\"Perform basic arithmetic operations.\"\"\"\n    operations = {\n        \"plus\": a + b,\n        \"minus\": a - b,\n        \"multiply\": a * b,\n        \"divide\": a / b if b != 0 else \"Error: Division by zero\"\n    }\n\n    if op not in operations:\n        return f\"Error: Unsupported operation '{op}'. Use: plus, minus, multiply, divide\"\n\n    result = operations[op]\n    return f\"{a} {op} {b} = {result}\"\n\nif __name__ == \"__main__\":\n    # Run with STDIO transport\n    mcp.run(transport=\"stdio\")\n</code></pre>"},{"location":"#client-stdio","title":"Client (stdio)","text":"<pre><code># client_stdio.py\nimport asyncio\nfrom fastmcp import Client\n\nasync def main():\n    client = Client(\"stdio_server.py\")\n\n    async with client:\n        print(\"FastMCP STDIO Client\")\n\n        # 1. List tools\n        tools_list = await client.list_tools()\n        print(\"\\nAvailable tools:\")\n        for tool in tools_list:\n            print(f\" - {tool.name}: {tool.description}\")\n            print(f\"   Input schema: {tool.inputSchema}\")\n\n        # 2. Call greet tool\n        name = \"Fast MCP Demo\"\n        result = await client.call_tool(\"greet\", arguments={\"name\": name})\n\n        # Extract and print result nicely\n        if result.content:\n            print(f\"\\nTool returned: {result.content[0].text}\")\n        else:\n            print(\"\\nTool returned no content!\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"#run","title":"Run","text":"<pre><code>python client_stdio.py\n</code></pre>"},{"location":"#2-sse-server-sent-events-transport","title":"2. <code>sse</code> (Server-Sent Events) Transport","text":""},{"location":"#when-to-use_1","title":"When to Use","text":"<ul> <li>Ideal for long-lived connections over HTTP.</li> <li>Suitable for browser-based clients or when you need a single connection streaming multiple events.</li> </ul>"},{"location":"#server-sse","title":"Server (sse)","text":"<pre><code># server_sse.py\nfrom fastmcp import FastMCP\n\n# Create MCP server instance\nmcp = FastMCP(\"SSE Demo Server\")\n\n@mcp.tool()\ndef greet(name: str) -&gt; str:\n    \"\"\"Greet someone by name.\"\"\"\n    return f\"Hello, {name}!\"\n\n@mcp.tool()\ndef calculate(op: str, a: float, b: float) -&gt; str:\n    \"\"\"Perform basic arithmetic operations.\"\"\"\n    operations = {\n        \"plus\": a + b,\n        \"minus\": a - b,\n        \"multiply\": a * b,\n        \"divide\": a / b if b != 0 else \"Error: Division by zero\"\n    }\n\n    if op not in operations:\n        return f\"Error: Unsupported operation '{op}'. Use: plus, minus, multiply, divide\"\n\n    result = operations[op]\n    return f\"{a} {op} {b} = {result}\"\n\nif __name__ == \"__main__\":\n    # Run with SSE transport\n    mcp.run(transport=\"sse\", host=\"127.0.0.1\", port=8000)\n</code></pre>"},{"location":"#client-sse","title":"Client (sse)","text":"<pre><code># client_sse.py\nimport asyncio\nfrom fastmcp import Client\n\nasync def main():\n    client = Client(\"http://127.0.0.1:8000/sse\")\n\n    async with client:\n        print(\"FastMCP SSE Client\")\n\n        # 1. List tools\n        tools_list = await client.list_tools()\n        print(\"\\nAvailable tools:\")\n        for tool in tools_list:\n            print(f\" - {tool.name}: {tool.description}\")\n            print(f\"   Input schema: {tool.inputSchema}\")\n\n        # 2. Call greet tool\n        name = \"Fast MCP Demo\"\n        result = await client.call_tool(\"greet\", arguments={\"name\": name})\n\n        # Extract and print result nicely\n        if result.content:\n            print(f\"\\nTool returned: {result.content[0].text}\")\n        else:\n            print(\"\\nTool returned no content!\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"#run_1","title":"Run","text":"<pre><code>python server_sse.py\npython client_sse.py\n</code></pre>"},{"location":"#3-http-transport","title":"3. <code>http</code> Transport","text":""},{"location":"#when-to-use_2","title":"When to Use","text":"<ul> <li>Best for stateless, request/response style communication.</li> <li>Use when you only need single-shot tool calls (no persistent connection).</li> </ul>"},{"location":"#server-http","title":"Server (http)","text":"<pre><code># server_http.py\nfrom fastmcp import FastMCP\n\n# Create MCP server instance\nmcp = FastMCP(\"HTTP Demo Server\")\n\n@mcp.tool()\ndef greet(name: str) -&gt; str:\n    \"\"\"Greet someone by name.\"\"\"\n    return f\"Hello, {name}!\"\n\n@mcp.tool()\ndef calculate(op: str, a: float, b: float) -&gt; str:\n    \"\"\"Perform basic arithmetic operations.\"\"\"\n    operations = {\n        \"plus\": a + b,\n        \"minus\": a - b,\n        \"multiply\": a * b,\n        \"divide\": a / b if b != 0 else \"Error: Division by zero\"\n    }\n\n    if op not in operations:\n        return f\"Error: Unsupported operation '{op}'. Use: plus, minus, multiply, divide\"\n\n    result = operations[op]\n    return f\"{a} {op} {b} = {result}\"\n\nif __name__ == \"__main__\":\n    # Run with HTTP transport\n    mcp.run(transport=\"http\", host=\"127.0.0.1\", port=8000)\n</code></pre>"},{"location":"#client-http","title":"Client (http)","text":"<pre><code># client_http.py\nimport asyncio\nfrom fastmcp import Client\n\nasync def main():\n    client = Client(\"http://127.0.0.1:8000/mcp\")\n\n    async with client:\n        print(\"FastMCP HTTP Client\")\n\n        # 1. List tools\n        tools_list = await client.list_tools()\n        print(\"\\nAvailable tools:\")\n        for tool in tools_list:\n            print(f\" - {tool.name}: {tool.description}\")\n            print(f\"   Input schema: {tool.inputSchema}\")\n\n        # 2. Call greet tool\n        name = \"Fast MCP Demo\"\n        result = await client.call_tool(\"greet\", arguments={\"name\": name})\n\n        # Extract and print result nicely\n        if result.content:\n            print(f\"\\nTool returned: {result.content[0].text}\")\n        else:\n            print(\"\\nTool returned no content!\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"#run_2","title":"Run","text":"<pre><code>python server_http.py\npython client_http.py\n</code></pre>"},{"location":"#4-streamable-http-experimental","title":"4. <code>streamable http</code> (Experimental)","text":""},{"location":"#when-to-use_3","title":"When to Use","text":"<ul> <li>Similar to <code>http</code> but allows streaming results back to the client.</li> <li>Useful when tool output is large or incremental (e.g., logs, progress updates).</li> <li>Note: May still be experimental in some versions \u2014 check release notes.</li> </ul>"},{"location":"#server-streamable-http","title":"Server (streamable http)","text":"<pre><code># server_stream_http.py\n&lt;To be added&gt;\n</code></pre>"},{"location":"#client-streamable-http","title":"Client (streamable http)","text":"<pre><code># client_stream_http.py\n&lt;To be added&gt;\n</code></pre>"},{"location":"#run_3","title":"Run","text":"<pre><code>python server_stream_http.py\npython client_stream_http.py\n</code></pre>"},{"location":"#cli-usage","title":"CLI Usage","text":"<p>FastMCP also provides a CLI for running servers without writing client code:</p> <pre><code># Run with STDIO (default)\nmcp run server_stdio.py\n\n# Run with SSE  \nmcp run --transport sse --host 127.0.0.1 --port 9000 server_sse.py\n\n# Run with HTTP\nmcp run --transport http --host 127.0.0.1 --port 8000 server_http.py\n</code></pre>"},{"location":"#summary-table","title":"Summary Table","text":"Transport Type Connection Style Best For stdio Local pipes CLI tools, local dev sse Persistent HTTP stream Browser clients, real-time updates http Stateless HTTP Simple, one-off calls streamable http Streaming over HTTP Large/streamed responses"},{"location":"#best-practices","title":"Best Practices","text":"<ol> <li>Development: Use STDIO for quick prototyping and local development</li> <li>Production: Use HTTP transport for web services and production deployments  </li> <li>Legacy: Only use SSE if you need to maintain backward compatibility</li> <li>Error Handling: Always wrap client calls in try-catch blocks for production code</li> <li>Resource Management: Use <code>async with client:</code> to ensure proper cleanup</li> </ol>"},{"location":"#requirements","title":"Requirements","text":"<p>Make sure you have FastMCP installed:</p>"},{"location":"#1pip-install-fastmcp20","title":"<pre><code>pip install fastmcp&gt;=2.0\n</code></pre>","text":"<p>\u2705 Tip: Always match the transport option in both server and client to avoid connection errors. Make sure <code>fastmcp</code> \u2265 2.0 is installed before running these examples.</p>"}]}